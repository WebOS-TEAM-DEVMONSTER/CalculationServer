# -*- coding: utf-8 -*-
"""Untitled19.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/19G2dH1bXKEgLbXV2KMWqPDYwN0WZ7vdI
"""

!mkdir ~/.kaggle
!cp kaggle.json ~/.kaggle/
!chmod 600 ~/.kaggle/kaggle.json
!kaggle datasets download -d patelris/crop-yield-prediction-dataset
!unzip /content/crop-yield-prediction-dataset.zip -d /content/crop-yield-prediction-dataset

import pandas as pd
import numpy as np
from sklearn.neighbors import KNeighborsRegressor
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import OneHotEncoder, StandardScaler
from sklearn.compose import ColumnTransformer
from sklearn.metrics import mean_absolute_error, r2_score
import joblib

# 데이터 로드 및 전처리
df = pd.read_csv("/content/crop-yield-prediction-dataset/yield_df.csv")
df.drop('Unnamed: 0', axis=1, inplace=True)

# 필요한 컬럼 선택 (연도 제외)
col = ['average_rain_fall_mm_per_year', 'avg_temp', 'Item', 'hg/ha_yield']
df = df[col]

# X, y 설정
X = df.drop('hg/ha_yield', axis=1)  # 'Year'가 빠짐
y = df['hg/ha_yield']

# 데이터 분할
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=0, shuffle=True)

# 전처리 설정
ohe = OneHotEncoder(drop='first')
scale = StandardScaler()

preprocessor = ColumnTransformer(
    transformers=[
        ('StandardScale', scale, [0, 1]),  # 숫자형 데이터 ('average_rain_fall_mm_per_year', 'avg_temp')
        ('OneHotEncode', ohe, [2])         # 범주형 데이터 ('Item')
    ],
    remainder='passthrough'
)

# 전처리 적용
X_train_dummy = preprocessor.fit_transform(X_train)
X_test_dummy = preprocessor.transform(X_test)

# KNN 모델 학습
knn = KNeighborsRegressor()
knn.fit(X_train_dummy, y_train)

# 예측 및 성능 평가
y_pred = knn.predict(X_test_dummy)
print(f"KNN: mae : {mean_absolute_error(y_test, y_pred)} score : {r2_score(y_test, y_pred)}")

# KNN 모델 저장
joblib.dump(knn, '/content/knn_model_no_year.pkl')
print("KNN 모델이 저장되었습니다.")

# 예측 함수 정의 (상위 몇 %인지 계산 추가)
def prediction_and_rank(average_rain_fall_mm_per_year, avg_temp, Item):
    # 입력 데이터를 변환 (연도 제외)
    features = pd.DataFrame([[average_rain_fall_mm_per_year, avg_temp, Item]],
                            columns=['average_rain_fall_mm_per_year', 'avg_temp', 'Item'])

    transform_features = preprocessor.transform(features)

    # 예측 수확량 계산
    predicted_yield = knn.predict(transform_features).reshape(-1, 1)[0][0]

    # 해당 품종의 수확량 데이터 가져오기
    item_yields = df[df['Item'] == Item]['hg/ha_yield'].sort_values().values

    # 예측된 수확량이 상위 몇 퍼센트인지 계산
    rank_percentile = np.sum(item_yields < predicted_yield) / len(item_yields) * 100

    return predicted_yield, rank_percentile, Item

# 예측 함수 테스트
predicted_yield, rank_percentile, item = prediction_and_rank(1485.0, 16.37, 'Maize')
print(f"Predicted Yield: {predicted_yield}")
print(f"Predicted Yield is in the Top {rank_percentile:.2f}% for {item}")